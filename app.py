# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Paw2ClSI4assylE7J7pEIdJJE7R4yVEf
"""

import streamlit as st
import noisereduce as nr
import librosa
import soundfile as sf
import numpy as np
import whisper
import whisperx
from whisperx.diarize import DiarizationPipeline
from fpdf import FPDF
from datetime import datetime
from openai import OpenAI
from deep_translator import GoogleTranslator
import base64

st.set_page_config(page_title="Meeting Notes Generator", layout="centered")
st.title("Automatic Meeting Notes Generator ")

audio = st.file_uploader("Upload a meeting audio file", type=["wav", "mp3"])

if audio is not None:
    with open("input.wav", "wb") as f:
        f.write(audio.read())
    st.success("Audio uploaded successfully!")

    if st.button("Start Processing"):
        with st.spinner("Reducing noise and transcribing..."):
            try:
                audio_data, sample_rate = librosa.load("input.wav", sr=None)
                chunk_duration_sec = 60
                chunk_samples = int(chunk_duration_sec * sample_rate)
                noise = audio_data[0:int(sample_rate * 1)]
                denoised_audio = []

                for start in range(0, len(audio_data), chunk_samples):
                    end = min(start + chunk_samples, len(audio_data))
                    curr_chunk = audio_data[start:end]
                    reduced_chunk = nr.reduce_noise(y=curr_chunk, sr=sample_rate, y_noise=noise)
                    denoised_audio.append(reduced_chunk)

                denoised_audio = np.concatenate(denoised_audio)
                sf.write("denoised.wav", denoised_audio, sample_rate)

            except Exception as e:
                st.error(f"Noise reduction failed: {e}")

        try:
            st.subheader("Transcribing audio...")
            model = whisper.load_model("tiny")
            result = model.transcribe("denoised.wav", task="translate")
            st.text_area("Detected language:", result["language"])
            st.text_area("Transcript", result["text"], height=200)
        except Exception as e:
            st.error(f"Transcription failed: {e}")

        if st.button("Run Speaker Diarization"):
            with st.spinner("Identifying speakers..."):
                try:
                    st.subheader("Speaker Diarization is being implemented")
                    model = whisperx.load_model("large-v2", device="cpu", compute_type="int8")
                    device = "cpu"
                    diarization_model = DiarizationPipeline(
                        use_auth_token=st.secrets["HUGGINGFACE_TOKEN"], device=device)
                    diarization_segments = diarization_model("denoised.wav")
                    assign_speakers = whisperx.assign_word_speakers(diarization_segments, result)

                    diarization_text = ""
                    for seg in assign_speakers["segments"]:
                        speaker_label = seg.get('speaker', 'Unknown')
                        diarization_text += f"[{seg['start']:.2f} ~ {seg['end']:.2f}] Speaker {speaker_label}: {seg['text']}\n"

                    st.success("Diarization Complete!")
                    st.text_area("Speaker Diarization", diarization_text, height=300)

                except Exception as e:
                    st.error(f"Speaker diarization failed: {e}")

        long_text = result["text"]
        prompt1 = f"""
You are a professional meeting summarizer and executive assistant.

Given the following transcript, generate a **high-quality, structured meeting summary** in natural, flowing paragraphs that reads as if written by a human assistant. Your summary should cover the following sections clearly and cohesively:

1. **Title** – A concise, descriptive title for the meeting (can include topic or theme).
2. **Participants** – List the main attendees and their roles (if known).
3. **Introduction** – State the purpose, setting, and timing of the meeting.
4. **Main Discussion** – Summarise the key points discussed, grouped logically by topics. Include any notable quotes or references to who said what, if available.
5. **Decisions Made** – Clearly explain outcomes or agreements reached. Embed them naturally within the discussion or call them out separately.
6. **Action Items & Assignments** – Describe tasks, responsibilities, and (if present) deadlines. Try to include the responsible person's name or role.
7. **Unresolved Questions or Follow-Ups** – Mention any issues that require further investigation or discussion.
8. **Conclusion** – Wrap up with the general outcome or next direction, highlighting achievements or challenges.

**Guidelines:**
- Write in professional, British English.
- Use well-organised paragraphs, not bullet points unless necessary for clarity (like in Action Items).
- Avoid repeating filler words or exact transcript text.
- Do not make up facts not present in the transcript.
- If the transcript includes timestamps or speaker names, use them selectively for clarity and attribution.
- If relevant, estimate approximate timestamps for key decisions or moments using context.

Transcript:
{long_text}
"""

        translated_summary = None
        human_summary = None

        if st.button("Generate Summary"):
            with st.spinner("Generating summary with LLaMA-3..."):
                try:
                    client = OpenAI(
                        base_url="https://api.together.xyz/v1",
                        api_key=st.secrets["TOGETHER_API_KEY"]
                    )

                    response = client.chat.completions.create(
                        model="meta-llama/Llama-3.3-70B-Instruct-Turbo-Free",
                        messages=[{"role": "user", "content": prompt1}],
                        max_tokens=1100,
                        temperature=0.3,
                    )

                    second_prompt = f"""
You are a skilled executive assistant refining the output of an AI-generated meeting summary.

Your task is to improve tone, flow, and clarity without losing structure or information. You should polish the writing to make it sound more natural, more human, and professional – as if it’s being prepared for a senior manager or team leader.

**Your Goals:**
- Improve sentence structure and word flow.
- Convert robotic or abrupt lines into fluent, well-written English.
- Maintain the section headers (e.g., Introduction, Main Discussion, etc.).
- Use paragraph form mostly, but retain bullet points where they add clarity (e.g., in Action Items or Unresolved Questions).
- Preserve accuracy of content — don’t invent anything.
- Keep a professional, business-like tone (British English), but avoid sounding stiff or too generic.
- Length should be proportionate to a 30-minute meeting.

Here is the AI-generated summary to refine
{response.choices[0].message.content}
"""

                    human_response = client.chat.completions.create(
                        model="meta-llama/Llama-3.3-70B-Instruct-Turbo-Free",
                        messages=[{"role": "user", "content": second_prompt}],
                        max_tokens=4096,
                        temperature=0.3,
                    )

                    human_summary = human_response.choices[0].message.content
                    st.success("Summarization complete!")
                    st.subheader("Humanized Summary")
                    st.text_area("Human-style Summary", human_summary, height=250)

                except Exception as e:
                    st.error(f"Summarization failed: {str(e)}")

        st.subheader("Step 3: Translate (Optional)")
        choose_lang = st.selectbox("Choose a language", ["None", "hi", "te", "ta", "kn", "mr", "bn"])

        if choose_lang != "None" and human_summary:
            try:
                translator = Translator()
                translated = Googletranslator.translate(human_summary, src='en', dest=choose_lang)
                translated_summary = translated.text
                st.text_area("Translated Summary", translated_summary, height=200)
            except Exception as e:
                st.error(f"Translation failed: {str(e)}")

        st.subheader("Download the PDF")

        class PDF(FPDF):
            def header(self):
                self.set_font("Helvetica", "B", 16)
                self.set_text_color(40, 40, 100)
                self.cell(0, 10, "Automated Meeting Summary", ln=True, align="C")
                self.set_font("Helvetica", "", 12)
                self.set_text_color(100, 100, 100)
                self.cell(0, 10, f"Generated on {datetime.now().strftime('%d %b %Y, %I:%M %p')}", ln=True, align="C")
                self.ln(5)

            def section_title(self, title):
                self.ln(10)
                self.set_font("Helvetica", "B", 14)
                self.set_text_color(30, 30, 30)
                self.cell(0, 10, title, ln=True)
                self.set_draw_color(180, 180, 180)
                self.line(10, self.get_y(), 200, self.get_y())
                self.ln(4)

            def section_body(self, text):
                self.set_font("Helvetica", "", 12)
                self.set_text_color(50, 50, 50)
                self.multi_cell(0, 8, text)
                self.ln(2)

        if human_summary:
            pdf = PDF()
            pdf.add_page()
            pdf.section_title("AUTOMATED MEETING SUMMARY")
            pdf.section_body(translated_summary if translated_summary else human_summary)

            pdf.output("meeting_summary.pdf")
            with open("meeting_summary.pdf", "rb") as f:
                st.download_button("Download PDF", f, file_name="meeting_summary.pdf", mime='application/pdf')

            st.success("Done! Your meeting summary is ready.")
        else:
            st.warning("Summary not found. Run the summarization step first.")


#to correct the grammar mistakes#
 #text=human_response.choices[0].message.content
#tool = language_tool_python.LanguageTool('en-GB')
#matches = tool.check(text)
#corrected_text = language_tool_python.utils.correct(text, matches)
